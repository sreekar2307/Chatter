{"version":3,"sources":["components/User.js","app/socket.js","components/Friends.js","components/Register.js","App.js","reportWebVitals.js","index.js"],"names":["UserContext","React","createContext","io","transports","upgrade","autoConnect","path","useStyles","makeStyles","theme","root","display","alignItems","width","position","bottom","height","right","input","friends","borderRight","Friends","classes","useState","setFriends","messages","setMessages","selectedFriend","setSelectedFriend","message","setMessage","user","useContext","useEffect","socket","emit","resp","filter","res","userID","userConnectedHandler","newUser","existing","findIndex","friend","active","userDisconnectHandler","NewList","map","privateMessageHandler","content","seen","to","id","newMessages","messageDeliveredHandler","on","off","handleOnSelect","Object","values","handleSendMessage","toUser","from","text","messagesBody","index","Message","delivered","style","Grid","container","item","xs","className","List","component","Friend","username","selectedUser","selected","Welcome","Paper","maxHeight","overflow","OutlinedInput","disabled","value","fullWidth","type","onKeyDown","e","which","placeholder","onChange","event","target","endAdornment","IconButton","aria-label","onClick","ListItem","button","ListItemIcon","Tooltip","title","Badge","variant","color","overlap","fontSize","ListItemText","primary","left","secondary","statusIcon","Card","CardHeader","subheader","CardContent","getModalStyle","top","transform","paper","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Register","modalStyle","setUser","open","setOpen","loading","setLoading","valid","setValid","textFieldValue","setTextFieldValue","buttonDisabled","setButtonDisabled","localStorage","getItem","auth","sessionObj","connect","disconnect","body","direction","Typography","gutterBottom","textAlign","TextField","error","label","helperText","required","validity","length","Button","setItem","Modal","aria-labelledby","aria-describedby","App","context","setContext","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df83b958.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const UserContext = React.createContext();\n","import { io } from \"socket.io-client\";\n\nconst URL = \"http://localhost:4000\";\nexport default io(URL, {\n  transports: [\"websocket\"],\n  upgrade: false,\n  autoConnect: false,\n  path: \"/ws\",\n});\n\n// export function userListeners(socket) {\n//   socket.once(\"user connected\", (newUser) => {\n//     if (newUser) {\n//       const existing = friends.findIndex(\n//         (friend) => friend.userID === newUser.userID\n//       );\n//       if (existing !== -1) {\n//         friends[existing].active = true;\n//         setFriends([...friends]);\n//       } else {\n//         setFriends([...friends, newUser]);\n//       }\n//     }\n//   });\n//\n//   socket.once(\"user disconnected\", (userID) => {\n//     const NewList = friends.map((friend) => {\n//       if (friend.userID === userID) {\n//         friend.active = false;\n//       }\n//       return friend;\n//     });\n//     setFriends(NewList);\n//   });\n// }\n//\n// export function messageListeners(socket) {\n//   socket.once(\"private message\", (content) => {\n//     if (friends.length > selectedFriend) {\n//       const seen = content.to === friends[selectedFriend].userID;\n//       socket.emit(\"message received\", content.id, seen, (message) => {\n//         const newMessages = [...messages, message];\n//         setMessages(newMessages);\n//       });\n//     }\n//   });\n//\n//   socket.once(\"delivered\", (content) => {\n//     const newMessages = messages.map((message) => {\n//       if (message.id === content.id) {\n//         return content;\n//       }\n//       return message;\n//     });\n//     setMessages(newMessages);\n//   });\n// }\n","import { useContext, useEffect, useState } from \"react\";\nimport socket from \"../app/socket\";\nimport {\n  Badge,\n  Card,\n  CardContent,\n  CardHeader,\n  Grid,\n  IconButton,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  OutlinedInput,\n  Paper,\n  Tooltip,\n} from \"@material-ui/core\";\nimport AccountCircleIcon from \"@material-ui/icons/AccountCircle\";\nimport SendIcon from \"@material-ui/icons/Send\";\nimport { UserContext } from \"./User\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DoneAllIcon from \"@material-ui/icons/DoneAll\";\nimport DoneIcon from \"@material-ui/icons/Done\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"100%\",\n    position: \"absolute\",\n    bottom: 0,\n    height: \"10vh\",\n    right: 0,\n  },\n  input: {\n    height: \"100%\",\n  },\n  friends: {\n    borderRight: \"2px solid grey\",\n    position: \"relative\",\n    height: \"100vh\",\n  },\n}));\n\nexport default function Friends() {\n  const classes = useStyles();\n  const [friends, setFriends] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [selectedFriend, setSelectedFriend] = useState(-1);\n  const [message, setMessage] = useState(\"\");\n  const user = useContext(UserContext)[0];\n\n  useEffect(() => {\n    socket.emit(\"users\", (resp) => {\n      setFriends(resp.filter((res) => res.userID !== user.userID));\n    });\n\n    const userConnectedHandler = (newUser) => {\n      const existing = friends.findIndex(\n        (friend) => friend.userID === newUser.userID\n      );\n      if (existing !== -1) {\n        friends[existing].active = true;\n        setFriends([...friends]);\n      } else {\n        setFriends([...friends, newUser]);\n      }\n    };\n\n    const userDisconnectHandler = (userID) => {\n      const NewList = friends.map((friend) => {\n        if (friend.userID === userID) {\n          friend.active = false;\n        }\n        return friend;\n      });\n      setFriends(NewList);\n    };\n\n    const privateMessageHandler = (content) => {\n      const seen = content.to === user.userID;\n      socket.emit(\"message received\", content.id, seen, (message) => {\n        const newMessages = [...messages, message];\n        setMessages(newMessages);\n      });\n    };\n\n    const messageDeliveredHandler = (content) => {\n      const newMessages = messages.map((message) => {\n        if (message.id === content.id) {\n          return content;\n        }\n        return message;\n      });\n      setMessages(newMessages);\n    };\n\n    socket.on(\"user connected\", userConnectedHandler);\n    socket.on(\"user disconnected\", userDisconnectHandler);\n    socket.on(\"private message\", privateMessageHandler);\n    socket.on(\"delivered\", messageDeliveredHandler);\n\n    return () => {\n      socket.off(\"user connected\", userConnectedHandler);\n      socket.off(\"user disconnected\", userDisconnectHandler);\n      socket.off(\"private message\", privateMessageHandler);\n      socket.off(\"delivered\", messageDeliveredHandler);\n    };\n  });\n\n  const handleOnSelect = (userID) => {\n    setSelectedFriend(friends.findIndex((friend) => friend.userID === userID));\n    socket.emit(\"messages\", user.userID, userID, (resp) => {\n      setMessages(Object.values(resp));\n    });\n  };\n  const handleSendMessage = () => {\n    const toUser = friends[selectedFriend];\n    setMessage(\"\");\n    socket.emit(\n      \"private message\",\n      {\n        from: user.userID,\n        to: toUser.userID,\n        text: message,\n      },\n      (resp) => {\n        setMessages([...messages, resp]);\n      }\n    );\n  };\n\n  const messagesBody = messages.map((message, index) => (\n    <Message\n      to={message.to}\n      from={message.from}\n      delivered={message.delivered}\n      seen={message.seen}\n      text={message.text}\n      key={`message-${index}`}\n      style={\n        selectedFriend !== -1 &&\n        ((message.to === friends[selectedFriend].userID &&\n          message.from === user.userID) ||\n          (message.from === friends[selectedFriend].userID &&\n            message.to === user.userID))\n          ? { display: \"block\" }\n          : { display: \"none\" }\n      }\n    >\n      {message.text}\n    </Message>\n  ));\n  return (\n    <Grid container style={{ height: \"100vh\" }}>\n      <Grid item xs={3} className={classes.friends}>\n        {friends.map((friend, index) => (\n          <List component=\"nav\">\n            <Friend\n              key={friend.userID}\n              username={friend.username}\n              userID={friend.userID}\n              active={friend.active}\n              selectedUser={handleOnSelect}\n              selected={index === selectedFriend}\n            />\n          </List>\n        ))}\n        <Welcome />\n      </Grid>\n      <Grid item xs={9} style={{ position: \"relative\" }}>\n        <Paper style={{ maxHeight: \"90vh\", overflow: \"auto\" }}>\n          {messagesBody}\n        </Paper>\n        <Paper className={classes.root}>\n          <OutlinedInput\n            className={classes.input}\n            disabled={selectedFriend === -1}\n            value={message}\n            id=\"message\"\n            fullWidth\n            type=\"text\"\n            onKeyDown={(e) => {\n              if (e.which === 13) {\n                handleSendMessage();\n              }\n            }}\n            placeholder=\"Send Message\"\n            onChange={(event) => setMessage(event.target.value)}\n            endAdornment={\n              <IconButton\n                disabled={selectedFriend === -1}\n                type=\"button\"\n                aria-label=\"send\"\n                onClick={handleSendMessage}\n              >\n                <SendIcon />\n              </IconButton>\n            }\n          />\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n}\n\nfunction Friend({ userID, username, active, selectedUser, selected }) {\n  return (\n    <ListItem button onClick={() => selectedUser(userID)} selected={selected}>\n      <ListItemIcon>\n        <Tooltip title={active ? \"online\" : \"offline\"}>\n          <Badge\n            variant=\"dot\"\n            color={active ? \"primary\" : \"secondary\"}\n            overlap=\"circular\"\n          >\n            <AccountCircleIcon fontSize=\"large\" color=\"primary\" />\n          </Badge>\n        </Tooltip>\n      </ListItemIcon>\n      <ListItemText primary={username} />\n    </ListItem>\n  );\n}\n\nfunction Welcome() {\n  const user = useContext(UserContext)[0];\n  return (\n    <List component=\"nav\" style={{ position: \"absolute\", bottom: 0, left: 0 }}>\n      <ListItem>\n        <ListItemText primary={\"Welcome\"} secondary={user.username} />\n      </ListItem>\n    </List>\n  );\n}\n\nfunction Message({ text, from, to, delivered, seen }) {\n  const user = useContext(UserContext)[0];\n  let statusIcon = <DoneIcon />;\n  if (delivered && seen) {\n    statusIcon = <DoneAllIcon color=\"primary\" />;\n  } else if (delivered) {\n    statusIcon = <DoneAllIcon color=\"inherit\" />;\n  }\n  return (\n    <Card style={{ position: \"relative\" }}>\n      <CardHeader subheader={user.userID === from ? \"You:\" : \"Friend:\"} />\n      <CardContent>\n        {text}\n        <div style={{ position: \"absolute\", right: 10 }}>{statusIcon}</div>\n      </CardContent>\n    </Card>\n  );\n}\n","import { useContext, useEffect, useState } from \"react\";\nimport { Button, Grid, Modal, TextField, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { UserContext } from \"./User\";\nimport socket from \"../app/socket\";\nimport Friends from \"./Friends\";\nfunction getModalStyle() {\n  return {\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction Register() {\n  const classes = useStyles();\n  const [modalStyle] = useState(getModalStyle);\n  const [user, setUser] = useContext(UserContext);\n  const [open, setOpen] = useState(true);\n  const [loading, setLoading] = useState(true);\n  const [valid, setValid] = useState(false);\n  const [textFieldValue, setTextFieldValue] = useState(\"\");\n  const [buttonDisabled, setButtonDisabled] = useState(true);\n\n  const handleUsernameChange = (event) => {\n    setTextFieldValue(event.target.value);\n    const validity = event.target.value.length > 2;\n    setValid(validity);\n    setButtonDisabled(!validity);\n  };\n\n  useEffect(() => {\n    const userID = localStorage.getItem(\"userID\");\n    if (userID) {\n      socket.auth = { userID };\n      socket.on(\"session\", (userID, sessionObj) => {\n        setLoading(false);\n        setUser(sessionObj);\n      });\n      socket.connect();\n    } else {\n      setLoading(false);\n    }\n    return () => {\n      socket.disconnect();\n    };\n  }, []);\n\n  const handleButtonClick = () => {\n    setOpen(false);\n    socket.auth = { username: textFieldValue };\n    setLoading(true);\n    socket.on(\"session\", (userID, sessionObj) => {\n      setUser(sessionObj);\n      setLoading(false);\n      localStorage.setItem(\"userID\", userID);\n    });\n    socket.connect();\n  };\n\n  const body = (\n    <Grid\n      container\n      style={modalStyle}\n      className={classes.paper}\n      direction=\"column\"\n      spacing={3}\n    >\n      <Grid item>\n        <Typography variant=\"h5\" gutterBottom style={{ textAlign: \"center\" }}>\n          Welcome To Chatter\n        </Typography>\n      </Grid>\n      <Grid item>\n        <TextField\n          error={!valid}\n          id=\"username\"\n          label=\"Enter Username\"\n          variant=\"outlined\"\n          helperText={\"length greater than 2\"}\n          fullWidth\n          required\n          onChange={handleUsernameChange}\n        />\n      </Grid>\n      <Grid item>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          disabled={buttonDisabled}\n          fullWidth\n          onClick={handleButtonClick}\n        >\n          Okay\n        </Button>\n      </Grid>\n    </Grid>\n  );\n\n  if (loading) return <div />;\n\n  return user ? (\n    <Friends />\n  ) : (\n    <Modal\n      open={open}\n      aria-labelledby=\"simple-modal-title\"\n      aria-describedby=\"simple-modal-description\"\n    >\n      {body}\n    </Modal>\n  );\n}\n\nexport default Register;\n","import { UserContext } from \"./components/User\";\nimport { useState } from \"react\";\nimport Register from \"./components/Register\";\n\nfunction App() {\n  const [context, setContext] = useState(null);\n  return (\n    <UserContext.Provider value={[context, setContext]}>\n      <Register />\n    </UserContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}